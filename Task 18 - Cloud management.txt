Task 18 - Cloud management'
1) Foundation services in AWS
2) Learn what is load balancing and types.
3) Learn Use case of all load balancers. 
4) VPC and it's use case, public sub net. 
5) ECR
6) RDS 
7) S3
----------------------------------------------------------------------
1) Foundation services in AWS
---------------------------------------------
https://thinkcloudly.com/blogs/aws/what-are-the-four-foundational-services-of-aws/#:~:text=AWS%20provides%20four%20services%20that,reliable%20application%20in%20the%20cloud.
https://intervision.com/blog-what-are-the-foundational-services-in-aws/
https://aws.amazon.com/architecture/cloud-foundations/

In Amazon Web Services (AWS), foundational services form the core infrastructure and building blocks that enable you to create and deploy various types of applications. These foundational services provide the fundamental resources and functionalities necessary for hosting and managing applications in the cloud. Here are 

some key AWS foundation services:
Amazon EC2 (Elastic Compute Cloud):
EC2 is a core compute service that allows you to run virtual servers (instances) in the cloud. It provides scalable computing capacity and is commonly used for hosting applications, running workloads, and handling various computing tasks.

Amazon S3 (Simple Storage Service):
S3 is an object storage service that enables you to store and retrieve any amount of data at any time. It is highly scalable, durable, and designed for storing and retrieving large amounts of data, making it a fundamental service for data storage and backup.

Amazon VPC (Virtual Private Cloud):
VPC allows you to create isolated and customizable network environments within the AWS cloud. It enables you to define your own IP address range, configure route tables, and control network access. VPC is essential for building secure and isolated network architectures.

Amazon RDS (Relational Database Service):
RDS is a managed database service that supports various relational database engines, such as MySQL, PostgreSQL, Oracle, and Microsoft SQL Server. It simplifies database setup, maintenance, and scaling, making it easier to deploy and manage databases in the cloud.

AWS Identity and Access Management (IAM):
IAM is a service that allows you to manage access to AWS services and resources securely. It enables you to create and control AWS users and groups, define policies, and set permissions to ensure secure and controlled access to your AWS environment.

Amazon Route 53:
Route 53 is a scalable and highly available domain name system (DNS) web service. It provides domain registration, DNS routing, and health checking, making it essential for managing domain names and directing traffic to various AWS resources.

AWS CloudFormation:
CloudFormation is an infrastructure-as-code (IaC) service that allows you to define and provision AWS infrastructure resources using a template. It helps automate the deployment and management of infrastructure, ensuring consistency and repeatability.

Amazon CloudWatch:
CloudWatch is a monitoring and observability service that provides real-time insights into your AWS resources and applications. It collects and tracks metrics, monitors log files, and sets alarms, allowing you to respond quickly to changes in your AWS environment.

Amazon CloudFront:
CloudFront is a content delivery network (CDN) service that accelerates the distribution of your content (including web pages, images, and videos) to end-users globally. It enhances the performance and availability of your applications by caching and delivering content from edge locations.

AWS Lambda:
Lambda is a serverless computing service that allows you to run code without provisioning or managing servers. It enables you to execute code in response to events, such as changes to data in an S3 bucket or updates to a database.

These foundational services provide the infrastructure and tools needed to build scalable, reliable, and secure applications in the AWS cloud. Many other AWS services complement these foundational ones, offering a comprehensive suite of solutions for various use cases and industries.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
AWS provides a comprehensive set of services that form the foundation of any cloud deployment, covering key aspects such as computing, storage, networking, and databases. Here's an explanation of how AWS addresses each of these fundamental components:

Computing (Amazon EC2 - Elastic Compute Cloud):
Description: Amazon EC2 is a core computing service that allows users to rent virtual servers (instances) on-demand. It provides scalable compute capacity in the cloud, allowing you to quickly scale up or down based on your application requirements.
Use Cases: EC2 is commonly used for hosting applications, running workloads, and executing various computing tasks. It supports a variety of instance types optimized for different use cases, including general-purpose, compute-optimized, memory-optimized, and GPU instances.

Storage (Amazon S3 - Simple Storage Service):
Description: Amazon S3 is an object storage service that provides scalable and durable storage in the cloud. It allows users to store and retrieve any amount of data at any time, offering high availability and low-latency access to stored objects.
Use Cases: S3 is widely used for data storage, backup, and archiving. It serves as a foundation for building data lakes, hosting static websites, and distributing content globally through its integration with the Amazon CloudFront content delivery network.

Networking (Amazon VPC - Virtual Private Cloud):
Description: Amazon VPC enables users to create isolated and customizable network environments within the AWS cloud. It allows you to define your own IP address range, create subnets, and configure routing tables and network gateways.
Use Cases: VPC is essential for building secure and isolated network architectures. It enables users to launch AWS resources, such as EC2 instances and RDS databases, in a virtual network, providing control over communication between resources and connection to the internet.

Database (Amazon RDS - Relational Database Service):
Description: Amazon RDS is a managed database service that simplifies the setup, operation, and scaling of relational databases in the cloud. It supports various database engines, including MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.
Use Cases: RDS is used for deploying and managing relational databases without the administrative overhead. It is suitable for a wide range of applications, from small projects to large-scale, production-ready databases. RDS takes care of routine database tasks such as backups, patch management, and replication.

These four foundational services—Amazon EC2, S3, VPC, and RDS—provide the basic building blocks for constructing and deploying applications in the cloud. AWS offers a wide range of additional services that complement these foundations, allowing users to address specific requirements related to security, monitoring, analytics, machine learning, and more. The flexibility and scalability of these services make AWS a popular choice for a diverse range of businesses and applications.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Learn what is load balancing and types.
--------------------------------------------
https://aws.amazon.com/what-is/load-balancing/#:~:text=Load%20balancing%20is%20the%20method,a%20fast%20and%20reliable%20manner.
https://youtu.be/dBmxNsS3BGE?si=95EzkMROSCVBKyVo

Load balancing is a crucial component in cloud computing and network architecture, used to distribute incoming network traffic across multiple servers or resources. The primary goal of load balancing is to ensure optimal utilization of resources, prevent individual servers from becoming overwhelmed, and enhance the overall performance, availability, and reliability of applications. In AWS, there are several types of load balancing services available:

Elastic Load Balancing (ELB):
Description: Elastic Load Balancing is a fully managed load balancing service provided by AWS. It automatically distributes incoming application traffic across multiple targets, such as Amazon EC2 instances, containers, and IP addresses, within one or more availability zones.
Types of ELB:
a. Application Load Balancer (ALB): Operates at the application layer (Layer 7) and is ideal for routing HTTP/HTTPS traffic. It supports content-based routing and enables advanced features such as host-based and path-based routing.
b. Network Load Balancer (NLB): Operates at the transport layer (Layer 4) and is designed to handle TCP, UDP, and TLS traffic. NLB is suitable for scenarios that require high performance, low latency, and static IP addresses.

Auto Scaling Groups:
Description: While not a load balancing service in itself, Auto Scaling Groups work in conjunction with load balancers to automatically adjust the number of instances in response to changes in demand. Auto Scaling ensures that the right number of instances are available to handle varying levels of application traffic.
Use Cases: Auto Scaling Groups can be associated with an Elastic Load Balancer to automatically adjust the number of instances based on policies defined by the user, helping to maintain consistent application performance.

Global Accelerator:
Description: AWS Global Accelerator is a service that uses static Anycast IP addresses to route traffic over the AWS global network. It provides benefits such as improved availability and performance by dynamically directing traffic to optimal AWS endpoints based on health, geography, and routing policies.
Use Cases: Global Accelerator is suitable for applications that require global presence and low-latency access. It can be used for both TCP and UDP traffic.

AWS Application Discovery Service (ADS):
Description: AWS Application Discovery Service helps enterprises plan migration projects by gathering information about their on-premises data centers. While it's not a load balancing service, it aids in understanding the infrastructure before implementing load balancing strategies.
Use Cases: ADS is primarily used for discovering and understanding application dependencies, making it easier to plan migrations and optimize resource placement.

Load balancing in AWS is an integral part of creating scalable, fault-tolerant, and high-performance applications. By distributing traffic across multiple resources, load balancers help ensure that applications are available and responsive even in the face of varying demand or potential failures. The choice of load balancing service depends on factors such as the type of traffic, required features, and specific use cases.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Learn Use case of all load balancers.
-----------------------------------------
https://docs.imperva.com/bundle/cloud-application-security/page/more/load-balancing-use-case.htm

Load balancers in AWS serve various use cases, each designed to address specific requirements and scenarios. Here are the common use cases for different types of load balancers:

Application Load Balancer (ALB):
Use Case: Web Applications and Microservices
ALB is ideal for distributing incoming HTTP/HTTPS traffic and is well-suited for web applications and microservices architectures.
Features content-based routing, allowing you to route requests based on hostnames or URL paths.
Supports WebSocket traffic for real-time communication applications.

Network Load Balancer (NLB):
Use Case: High-Performance Applications and TCP/UDP Traffic
NLB operates at the transport layer (Layer 4) and is designed for handling high-performance applications that require low-latency and scalable TCP, UDP, or TLS traffic.
Suitable for use cases such as gaming applications, voice-over-IP (VoIP), and IoT applications.

Classic Load Balancer (CLB):
Use Case: Legacy Applications and Simple Load Balancing
CLB is the original load balancer in AWS and is suitable for basic load balancing scenarios.
Provides simple load balancing for applications that do not require advanced features or routing capabilities.
While it still exists, AWS recommends using ALB or NLB for new deployments due to their enhanced features.

Elastic Load Balancing with Auto Scaling:
Use Case: Dynamic Scaling and Improved Fault Tolerance
Integrating Elastic Load Balancing with Auto Scaling Groups allows for dynamic scaling based on changes in demand.
Auto Scaling adjusts the number of instances based on policies, ensuring optimal resource utilization and improved fault tolerance.

Global Accelerator:
Use Case: Global Applications with Low Latency
Global Accelerator is suitable for applications that require low-latency access for a global user base.
Uses Anycast IP addresses to route traffic over the AWS global network, dynamically directing traffic to optimal endpoints based on health, geography, and routing policies.

Each type of load balancer in AWS is designed to address specific needs and considerations. When choosing a load balancer for a particular use case, factors such as the type of traffic, routing requirements, scalability needs, and global presence should be taken into account. It's common for applications to use a combination of load balancers and other AWS services to create a robust and scalable architecture.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) VPC and it's use case, public sub net.
-----------------------------------------
https://youtu.be/43tIX7901Gs?si=-oqKpcR5dMDECEHo

Amazon Virtual Private Cloud (VPC) is a foundational networking service within Amazon Web Services (AWS) that allows users to create isolated and customizable virtual networks in the cloud. VPC enables you to have control over your network settings, including IP address ranges, subnets, route tables, and security groups. Here are the key components of VPC and common use cases:

VPC Components:

CIDR Block: VPCs are defined by a Classless Inter-Domain Routing (CIDR) block, which determines the range of IP addresses available within the VPC.
Subnets: Subnets are segments of the VPC's IP address range in which you can launch resources. They provide isolation within the VPC and can be public or private.
Route Tables: Route tables control the traffic between subnets within the VPC and between the VPC and the internet.
Internet Gateway: An internet gateway enables communication between instances in the VPC and the internet.
NAT Gateway/NAT Instance: Network Address Translation (NAT) gateways or instances allow private subnet instances to initiate outbound traffic to the internet while blocking inbound traffic from the internet.

Use Cases of VPC:
Isolation and Security: VPC provides logical isolation for resources, allowing you to create private networks and control access using security groups and network access control lists (NACLs).
Custom Networking Topologies: Users can create multiple subnets, define route tables, and configure custom networking topologies to meet specific application requirements.
Public and Private Subnets: VPC allows the creation of public and private subnets within the same VPC. Public subnets typically have direct internet access, while private subnets do not.
Hybrid Cloud Deployments: VPC enables secure and seamless connectivity between on-premises data centers and the AWS cloud through VPN (Virtual Private Network) or Direct Connect connections.
Scalability: VPCs are highly scalable, allowing you to scale resources horizontally by adding more instances, and vertically by resizing instances.
Multi-Tiered Applications: VPC supports the creation of multi-tiered applications by placing different components, such as web servers and databases, in separate subnets for enhanced security.

Public Subnets:
A public subnet is a subnet that has a route to the internet via an attached internet gateway. Instances in a public subnet can have public IP addresses or Elastic IP addresses.

Use cases for public subnets include hosting web servers, load balancers, and any resources that need direct internet access.
Public subnets are typically associated with Route Tables that have a route to the internet.
In summary, VPC is a fundamental service in AWS, providing users with the ability to create isolated and customized network environments in the cloud. It is essential for achieving network security, segmentation, and connectivity, and it supports various use cases ranging from simple web hosting to complex multi-tiered applications. Public subnets within a VPC are particularly useful for hosting resources that require direct internet access.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) ECR
---------
https://youtu.be/Brm21SWac-I?si=45xBBgUylvizQhaY
https://youtu.be/1EMnrSt0mNo?si=nv-kq7mtIqqtmhkI
https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create-container-image.html  (creating docker image)


Amazon Elastic Container Registry (ECR) is a fully managed container registry service provided by Amazon Web Services (AWS). It allows you to store, manage, and deploy Docker container images in a secure and scalable manner. ECR is tightly integrated with other AWS services, making it a convenient choice for organizations using containerized applications. Here are key features and use cases for Amazon ECR:

Private Docker Registry:
Description: ECR serves as a private Docker container registry, allowing you to securely store and manage your container images. Images stored in ECR are accessible only within your AWS account by default.
Use Case: Ideal for organizations that need a secure and private repository for storing Docker container images used in their applications.

Integration with Amazon ECS:
Description: ECR seamlessly integrates with Amazon Elastic Container Service (ECS), which is AWS's container orchestration service. You can easily push and pull container images between ECR and ECS, simplifying the deployment process.
Use Case: Well-suited for deploying and managing containerized applications using ECS, enabling a smooth workflow for building, storing, and deploying Docker images.

Security and Access Control:
Description: ECR provides fine-grained access control using AWS Identity and Access Management (IAM) policies. You can control who has permission to push or pull images from your repositories.
Use Case: Allows organizations to enforce security policies and restrict access to container images based on roles and responsibilities within the team.

Scalable and Reliable:
Description: ECR is designed to be highly available and scalable, supporting the storage and retrieval of a large number of container images. It automatically scales to meet the demands of your containerized applications.
Use Case: Suitable for applications with varying container image storage and retrieval needs, providing reliability and performance as your containerized workloads grow.

Lifecycle Policy Management:
Description: ECR allows you to define lifecycle policies to automate the cleanup of outdated or unused images. This helps optimize storage costs and maintain a more efficient container image repository.
Use Case: Useful for managing storage costs and ensuring that only relevant and up-to-date container images are retained in the registry.

Cross-Region Replication:
Description: ECR supports cross-region replication, allowing you to replicate container images across different AWS regions. This helps improve availability and performance for containerized applications deployed in multiple regions.
Use Case: Beneficial for organizations with multi-region deployments, ensuring that container images are available in the desired regions.

Integrated with AWS CodeBuild:
Description: ECR integrates with AWS CodeBuild, enabling seamless building and pushing of container images as part of your continuous integration and continuous deployment (CI/CD) pipeline.
Use Case: Streamlines the development and deployment process, allowing you to automate the building and testing of container images before deploying them to production.

Amazon ECR simplifies the process of managing and deploying Docker container images in AWS, providing a secure and scalable solution for containerized applications. It is a key component of the AWS container ecosystem, working in conjunction with services like ECS, EKS (Elastic Kubernetes Service), and other container-related tools and services.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
6) RDS
---------
https://youtu.be/eMzCI7S1P9M?si=-jy_xm9ux8yk5ENu
https://youtu.be/rM_c7K0-tC0?si=Wr7tCL_Pflv74K5c
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html

Amazon Relational Database Service (RDS) is a fully managed relational database service provided by Amazon Web Services (AWS). RDS simplifies the process of setting up, operating, and scaling a relational database by handling routine database tasks such as hardware provisioning, database setup, patching, and backups. Here are key features and use cases of Amazon RDS:

Key Features:
Managed Databases:
RDS supports various relational database engines, including MySQL, PostgreSQL, MariaDB, Oracle, and Microsoft SQL Server. It takes care of administrative tasks, allowing users to focus on application development.

Automated Backups:
RDS automatically performs backups of your database, and you can choose to retain backups for a specified duration. This ensures data durability and provides a point-in-time recovery option.

High Availability:
RDS supports Multi-AZ (Availability Zone) deployments, where a standby replica of the database is automatically created in a different availability zone for failover in case of a primary database failure.

Scalability:
RDS makes it easy to scale database resources vertically by resizing the instance or horizontally by adding read replicas to handle read-heavy workloads.

Security:
RDS provides security features such as encryption at rest using AWS Key Management Service (KMS), encryption in transit, and integration with AWS Identity and Access Management (IAM) for access control.

Automated Software Patching:
RDS automatically applies minor database engine updates and patches during a specified maintenance window, reducing the operational burden on users.

Performance Monitoring:
RDS provides insights into database performance through Amazon CloudWatch metrics, enabling users to monitor metrics, set alarms, and troubleshoot performance issues.

Parameter Groups and Option Groups:
Users can customize database engine settings using parameter groups and enable additional features using option groups, providing flexibility and control over database configurations.

Use Cases:
Web Applications:
RDS is commonly used as a backend database for web applications. It supports popular web application database engines like MySQL and PostgreSQL.

Business Applications:
RDS is suitable for hosting relational databases that support business-critical applications, including customer relationship management (CRM) and enterprise resource planning (ERP) systems.

Data Warehousing:
Amazon RDS is used for data warehousing applications, especially when dealing with large volumes of structured data that require the capabilities of a relational database.

Development and Testing:
RDS is valuable for development and testing environments, allowing developers to easily set up and manage databases without dealing with the complexities of database administration.

Managed Databases for Multi-Tier Architectures:
RDS supports multi-tier architectures where databases can be used as part of a broader application infrastructure, integrated with other AWS services.

By leveraging Amazon RDS, users can benefit from a managed, scalable, and highly available relational database solution without the operational overhead of traditional database management. The choice of database engine and instance types depends on specific application requirements and use cases.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) S3
------
https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html
https://youtu.be/tfU0JEZjcsg?si=3vcsMYfj6Dw2QYBh

Amazon Simple Storage Service (S3) is a widely used object storage service provided by Amazon Web Services (AWS). S3 allows users to store and retrieve any amount of data at any time, providing scalable, durable, and secure storage for a variety of use cases. Here are key features and use cases of Amazon S3:

Key Features:
Object Storage:
S3 is designed for storing and retrieving objects, which can include files, images, videos, documents, and other types of data. Each object is stored as a key-value pair, and objects can be organized into buckets.

Scalability and Durability:
S3 is highly scalable, allowing users to store virtually unlimited amounts of data. It automatically scales to accommodate growing storage needs. The service also provides high durability by replicating data across multiple geographically dispersed data centers.

Data Lifecycle Management:
S3 supports lifecycle policies that allow users to automate the transition of objects between storage classes or to expire objects after a certain period. This helps in optimizing storage costs and managing data over its lifecycle.

Versioning:
S3 supports versioning, allowing users to keep multiple versions of an object. This feature is useful for maintaining a history of changes and recovering from accidental deletions or overwrites.

Security:
S3 provides multiple layers of security, including access control lists (ACLs), bucket policies, and integration with AWS Identity and Access Management (IAM). Users can control who can access their objects and under what conditions.

Data Transfer Acceleration:
S3 Transfer Acceleration allows for faster uploading and downloading of objects by utilizing the Amazon CloudFront content delivery network.

Static Website Hosting:
S3 can be used to host static websites by serving HTML, CSS, JavaScript, and other static files directly from S3.

Event Notifications:
S3 supports event notifications that can trigger actions (e.g., invoking AWS Lambda functions or sending messages to Amazon SNS) when specific events occur on objects, such as object creation or deletion.

Use Cases:
Data Storage and Backup:
S3 is commonly used for storing and backing up data, providing a reliable and scalable solution for businesses to store critical information.

Content Distribution:
S3 integrates with Amazon CloudFront, allowing users to distribute content globally with low-latency access. This is ideal for serving static assets, such as images, videos, and documents, to users around the world.

Data Archiving:
S3 Glacier, a storage class within S3, is designed for data archiving and long-term storage at a lower cost. It is suitable for storing infrequently accessed data with retrieval times ranging from minutes to hours.

Big Data Analytics:
S3 is often used as a data lake for big data analytics, allowing organizations to store large volumes of structured and unstructured data for analysis using services like Amazon Athena, Amazon Redshift, or third-party analytics tools.

Application Hosting:
S3 can host static assets for web applications, serving as a cost-effective and scalable solution for hosting images, scripts, and other files.

Amazon S3 is a foundational service in AWS, playing a crucial role in many applications and scenarios across various industries. Its simplicity, scalability, and durability make it a popular choice for organizations of all sizes.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------







